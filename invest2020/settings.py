"""
Django settings for invest2020 project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os , dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
 
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ')#%jao7n84#ossi^21$=zr9!e9tzq-t+zxp3lw_mc^ghaelh-x'
#SECRET_KEY = os.environ.get('INVEST_2020_SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1','invest2020-henri.herokuapp.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bullbearetfs',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'invest2020.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [str(BASE_DIR.joinpath('templates'))],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'invest2020.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
#print("Hostname= {}".format(os.environ.get('TERM_PROGRAM')))

if os.environ.get('TERM_PROGRAM') == 'Apple_Terminal' and os.environ.get('USER') == 'henrimeli':
  DATABASES = {
    'default': {
        'HOST':'',
        'USER':'djangouser',
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'inv2020_db', 
    }
  }
elif os.environ.get('GITHUB_WORKFLOW'):
  DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
  }
else:
  DATABASES = {  
    'default' : dj_database_url.config(conn_max_age=600, ssl_require=True) 
  }
  #The line below is required for Heroku: https://devcenter.heroku.com/articles/heroku-postgresql (search for Django)


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

TEST_RUNNER = 'xmlrunner.extra.djangotestrunner.XMLTestRunner' if os.environ.get('TEST_RUNNER')==None else os.environ.get('TEST_RUNNER') 
TEST_OUTPUT_DIR = './test-reports/unittest' if os.environ.get('TEST_OUTPUT_DIR')==None else os.environ.get('TEST_OUTPUT_DIR')
TEST_OUTPUT_FILE_NAME = 'unittest.xml' if os.environ.get('TEST_OUTPUT_FILE_NAME')==None else os.environ.get('TEST_OUTPUT_FILE_NAME')
BROWSER_NAME='safari' if os.environ.get('BROWSER_NAME')==None else os.environ.get('BROWSER_NAME')
